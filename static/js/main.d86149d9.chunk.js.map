{"version":3,"sources":["media/42374.png","App.js","index.js"],"names":["module","exports","Select","props","class","onChange","event","console","log","target","value","setI","Graph0","pre","data","job","people","ratio","width","height","transform","x","y","textAnchor","x1","y1","x2","y2","stroke","font-size","map","item","i","key","fill","writing-mode","Math","max","cx","cy","rx","ry","SelectCountry","dataEGDI","country","points14","points16","points18","points20","col","flag","add","push","splice","onreset","type","onClick","e","setData","Graph2","useState","d","Graph1","preInt","preIntO","dataInternet","year","point","pointOld","population","population65","Graph3","ministry","total","online","p","col1","col2","name","Graph4","pre1","dataMynumber","num","Graph5","out","in","NameForm","setContry","Graph","japanPre2","contPre2","Italy","America","Germany","Korea","England","Switzerland","Luxembourg","France","Canada","Japan","data2","color","contry","mx","ceil","mx2","japanPre","contPre","id","className","strokeWidth","length","dominantBaseline","App","graphs","src","people0","alt","smooth","to","render","document","querySelector"],"mappings":"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","file":"static/js/main.d86149d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/42374.1c45513e.png\";","import React,{useState} from \"react\";\nimport {MemoryRouter} from \"react-router-dom\"\nimport {HashLink} from \"react-router-hash-link\";\nimport people0 from \"./media/42374.png\"\n\n\nconst App = () => {\n  var graphs = []\n  graphs.push(<Graph1 />)\n  graphs.push(<Graph2 />)\n  graphs.push(<Graph3 />)\n  graphs.push(<Graph4 />)\n  const [i, setI] = useState();\n  const [contry, setContry] = useState(\"\")\n  return (<div>\n    <section class=\"hero is-medium is-light is-bold\">\n      <div class=\"hero-body\">\n        <div class=\"container\">\n          <h1 class=\"title\">迫り来る人手不足の波</h1>\n          <h2 class=\"subtitle\">人手不足からみる日本の現状</h2>\n        </div>\n        \n        \n      </div>\n    </section>\n    <section class=\"section\">\n    <div class=\"container\">\n    <div class=\"columns is-mobile\">\n    　<div class=\"column is-8\">\n      <h1 class=\"title\">2030年、644万人が不足する</h1>\n      <h2 class=\"subtitle\">\n        日本では今、前例にないほどの人手不足問題に直面しています。\n      </h2>\n      <p>パーソナル総合研究所が推定したものによると、2030年には<strong>644万人</strong>もの人手が不足するということがわかっています。</p>\n      <p>しかし、労働人口については女性の働き方改革や、高齢者雇用等によって若干ではありますが年々、増加しているのが事実です。</p>\n      <p>したがって、増加の主力は女性や高齢者であり、今後も、女性や高齢者が中心となって労働力人口が増加していくと期待されますが、総人口の減少が続く以上、近い将来、労働力人口は必ず減少に転じることは明白です。</p>\n     </div>  \n      <div class=\"column is-4\">\n        <figure class=\"image is-128x128\">\n          <img src={people0} alt = \"hito1\"/>\n        </figure>\n      </div>\n    </div>\n    <div>\n      <h2 class=\"title\">\n        人手不足は深刻度が違う\n      </h2>\n      <p>人手不足問題は深刻化しつつありますが、その程度は業界間で大きな差があることがわかっています。</p>\n      <p>今後、業種別の就業者数を左右するポイントとしては、以下の３点が需要だと考えられます。</p>\n    </div>\n    <div class=\"columns\">\n      <div class=\"column is-one-third\">\n      <article class=\"message is-info\">\n        <div class=\"message-body\">\n        <MemoryRouter>\n         <HashLink smooth to = \"/hoge#link1\"><strong>1</strong><em>日本の生産性</em></HashLink>\n        </MemoryRouter>\n        </div>\n      </article>\n      </div>\n      <div class=\"column\">\n        <article class=\"message is-success\">\n          <div class=\"message-body\">\n          <MemoryRouter>\n           <HashLink smooth to = \"/hoge#link2\"><strong>2</strong><em>業種間の流出</em></HashLink>\n          </MemoryRouter>           \n          </div>\n        </article>\n      </div>\n      <div class=\"column\">\n      <article class=\"message is-warning\">\n        <div class=\"message-body\">\n        <MemoryRouter>\n         <HashLink smooth to = \"/hoge#link3\"><strong>3</strong><em>長寿国Japan</em></HashLink>\n        </MemoryRouter>\n        </div>\n      </article>\n      </div>\n    </div>\n  </div> \n  </section>\n  <section class=\"section\">\n    <div className=\"container\">\n    <div class=\"tile is-ancestor\">\n    <div class=\"tile is-5 is-vertical is-parent\">\n      <div class=\"tile is-child box\" id = \"link1\">\n        <p class=\"title\">One</p>\n        <h1 class=\"subtitle\">異業種間の転職率</h1>\n        <p>異業種を視野に入れた人材の確保や、人材の流出を回避するために企業は、社内体制や異業種との待遇格差などに視野を広げる必要があるだろう。</p>\n        \n        <Graph5 />\n          \n      </div>\n      <div class=\"tile is-child box\" id = \"link2\">\n        <p class=\"title\">Two</p>\n        <h1 class=\"subtitle\">主要先進国で最下位の日本</h1>\n        <p>過去を振り返ると、日本はバブル経済の余勢をかって1990年代はベスト5の常連でした。2000年にはルクセンブルクに次いで世界2位になったものの、そこからはどんどん順位を落として行きました。。</p>\n        <p>人手不足の中で生産性を高めるためにも、企業側が効率的に経済活動を行える環境を整備し、必要な施設・装備を整え新たな環境に労働者が適応できるよう人材育成を進めることが重要ではないかと考えます。</p>\n        <NameForm setContry = {contry, setContry}/>\n        <Graph props = {contry}/>        \n      </div>\n    </div>\n    <div class=\"tile is-7 is-vertical is-parent\">\n      <div class=\"tile is-child box\"id = \"link3\">\n        <p class=\"title\">Three</p>\n        <p class=\"subtitle\">あっぱれ長寿国日本</p>\n        <p>みなさんご存知の通り、日本は長年世界でも有数な長寿国となっています。</p>\n        <p>実際、私の住んでいる杉並区も新しい建物が建つのかと思うと、大体が老人ホームだったりします。そう感じるくらい、とても高齢化問題は身近です。</p>\n        <p>このまま総人口が減少する中で65歳以上の人口が増加すると2036年には、高齢化率は<strong>3人に1人、約33.3%</strong>の割合になると言われています。</p>\n        <p>このようなことから、高齢者の活躍の場を広げることは急がれます。企業側が、高齢者が働きやすい環境を作ることはもちろん、政府も希望する高齢者が70歳まで働けるようにするために、高年齢者雇用安定法の改正を検討すべきだと考えます。</p>\n        \n        <Graph0 />\n        \n      </div>\n    \n      <div class=\"tile is-child box\">\n        <p class=\"title\">おまけ</p>\n        <p class=\"subtitle\">コロナ渦で露呈した日本のデジタル化遅れ</p>\n        <p>日本は新型コロナウイルス対策を巡って、現金給付の行政手続きに時間がかかるなどデジタル化の遅れが浮き彫りになりました。</p>\n        <p>2016年にOECD（経済協力開発機構）が発表した日本の電子政府利用率は、コロンビアなどと並ぶ<strong>6.2％</strong>と最低水準でした。</p>\n        <p>また、マイナンバー制度が導入されてから4年たちましたが、いまだに普及率が低いのが現状であることがわかりました。</p>\n        <Select setI = {i, setI}/>\n        {graphs[i]}\n      </div>\n    </div>\n  </div>   \n  </div>\n  </section>\n  <footer class=\"footer\">\n  <div class=\"content has-text-centered\">\n    <p>\n      <strong>© team-2020C </strong>\n    </p>\n  </div>\n</footer>\n  </div>\n  );\n};\n\nconst Select = (props) => {\n  const change = (event) => {\n    console.log(event.target.value)\n    props.setI(event.target.value-1)\n  }\n  return ( \n   <form> \n    <div class=\"select\">\n     <select onChange = {change}>\n        <option value=\"0\">----</option>\n        <option value=\"1\"　>インターネット普及率</option>\n        <option value=\"2\"　>電子政府率の国際比較</option>\n        <option value=\"3\"　>行政のオンライン化状況</option>\n        <option value=\"4\"　>マイナンバーカード普及率</option>\n     </select>\n    </div>  \n   </form>  \n  )\n}\n\n\nconst Graph0 = () => {\n  \n    const width = 745\n    const height = 900\n    var pre = height\n    const data = [\n      {job: \"農業、林業\", people: 107, ratio: 51.0},\n      {job: \"漁業\", people: 15.34, ratio: 29.0},\n      {job: \"建設業\", people: 78, ratio: 15.5},\n      {job: \"製造業\", people: 94, ratio: 8.9},\n      {job: \"情報通信業\", people: 5, ratio: 2.3},\n      {job: \"運輸業、郵便業\", people: 39, ratio: 11.4},\n      {job: \"卸売業、小売業\", people: 127, ratio: 11.8},\n      {job: \"金融業、保険業\", people: 7, ratio: 4.3},\n      {job: \"不動産業、物品賃貸業\", people: 33, ratio: 25.4},\n      {job: \"宿泊業、飲食サービス業\", people: 61, ratio: 14.7},\n      {job: \"生活関連サービス業、娯楽業\", people: 43, ratio: 18.2},\n      {job: \"学術、学習支援業\", people: 26, ratio: 8.1},\n      {job: \"医療、福祉\", people: 80, ratio: 9.6},\n      {job: \"サービス業（他に分類されないもの）\", people: 128, ratio: 18.7},\n      {job: \"公務（他に分類されるものを除く）\", people: 8, ratio: 3.4},\n    ]\n    const barHeight = 20;\n    return (\n    <svg width={width} height={height}>\n      <g transform=\"translate(50,0)\">\n        <text x=\"0\" y=\"250\" textAnchor=\"end\">(万人)</text>\n        <text x=\"-13\" y={height/2+145} textAnchor=\"start\">0</text>\n        <line x1=\"0\" y1=\"30\" x2=\"0\" y2={height/2+150} stroke=\"black\" />\n        <line x1={width-120} y1=\"30\" x2={width-120} y2={height/2+150} stroke=\"black\" />\n        <line x1=\"0\" y1={height/2+150} x2={width-120} y2={height/2+150} stroke=\"black\" />\n\n        <text x=\"315\" y=\"40\" textAnchor=\"middle\" font-size = \"28\">産業別高齢者数・割合</text>\n        \n        <line x1=\"-15\" y1=\"275\" x2=\"0\" y2=\"275\" stroke=\"black\" /><text x=\"-52\" y=\"275\" textAnchor=\"start\" font-size=\"13\">1000</text>\n        <line x1=\"-15\" y1=\"355\" x2=\"0\" y2=\"355\" stroke=\"black\" /><text x=\"-45\" y=\"355\" textAnchor=\"start\" font-size=\"13\">750</text>\n        <line x1=\"-15\" y1=\"435\" x2=\"0\" y2=\"435\" stroke=\"black\" /><text x=\"-45\" y=\"435\" textAnchor=\"start\" font-size=\"13\">500</text>\n        <line x1=\"-15\" y1=\"515\" x2=\"0\" y2=\"515\" stroke=\"black\" /><text x=\"-45\" y=\"515\" textAnchor=\"start\" font-size=\"13\">250</text>\n\n        <line x1={width-120} y1=\"30\" x2={width-105} y2=\"30\" stroke=\"black\" /><text x={width-105}  y=\"33\" textAnchor=\"start\" font-size=\"13\">60</text>\n        <line x1={width-120} y1=\"90\" x2={width-105} y2=\"90\" stroke=\"black\" /><text x={width-105}  y=\"93\" textAnchor=\"start\" font-size=\"13\">50</text>\n        <line x1={width-120} y1=\"150\" x2={width-105} y2=\"150\" stroke=\"black\" /><text x={width-105}  y=\"153\"textAnchor=\"start\" font-size=\"13\">40</text>\n        <line x1={width-120} y1=\"210\" x2={width-105} y2=\"210\" stroke=\"black\" /><text x={width-105}  y=\"213\" textAnchor=\"start\" font-size=\"13\">30</text>\n        <line x1={width-120} y1=\"270\" x2={width-105} y2=\"270\" stroke=\"black\" /><text x={width-105}  y=\"273\" textAnchor=\"start\" font-size=\"13\">20</text>\n        <line x1={width-120} y1=\"330\" x2={width-105} y2=\"330\" stroke=\"black\" /><text x={width-105}  y=\"333\" textAnchor=\"start\" font-size=\"13\">10</text>\n        <line x1={width-120} y1=\"390\" x2={width-105} y2=\"390\" stroke=\"black\" /><text x={width-105}  y=\"393\" textAnchor=\"start\" font-size=\"13\">0</text>\n        <text x={width-117} y=\"440\" textAnchor=\"start\">(%)</text>\n        \n        {data.map((item, i) => {\n          return (\n            <g key={item.job} transform={`translate(${40 * (i + 1)},0)`}>\n              <rect\n                x={-barHeight}\n                y={599-((item.people*100/item.ratio)*32.5/100)}\n                width={barHeight}\n                height={((item.people*100/item.ratio)*32.5/100)}\n                fill={\"pink\"}\n              />\n              <rect\n                x={-barHeight}\n                y={599-((item.people)*32.5/100)}\n                width={barHeight}\n                height={((item.people)*32.5/100)}\n                fill={\"lightblue\"}\n              />\n              <text x=\"-15\" y={height/2+150} textAnchor=\"start\"　writing-mode=\"tb\">\n                {item.job}\n              </text>\n              </g>             \n          );\n        })}\n\n        {data.map((item, i) => {\n          pre = data[Math.max(0, i - 1)][\"ratio\"]\n          return (\n            <g transform=\"translate(30,0)\">\n              <line x1 = {Math.max(0, 40 * (i - 1))} y1 = {393-pre*6} x2 = {40*i} y2 = {393-item.ratio*6} stroke=\"orange\"/>\n              <ellipse\n                        cx = {40*i}\n                        cy = {393-item.ratio*6}\n                        rx = \"3\"\n                        ry = \"3\"\n                        fill = \"orange\"\n              />\n              <text x={40*i} y={375-item.ratio*6} textAnchor=\"middle\">{item.ratio}</text>\n\n            </g>\n          );\n        })}\n      </g>\n    </svg>\n  );\n};\n\nconst SelectCountry = (props) =>{\n  const data = []\n  console.log(data)\n  const dataEGDI = [\n    {country: \"韓国\",         points14: 0.9462, points16: 0.8915, points18: 0.9010, points20: 0.9560, col: \"lavender\"},\n    {country: \"オーストラリア\", points14: 0.9103, points16: 0.9143, points18: 0.9053, points20: 0.9432, col: \"slateblue\"},\n    {country: \"シンガポール\",  points14: 0.9076, points16: 0.8828, points18: 0.8812, points20: 0.9150, col: \"firebrick\"},\n    {country: \"フランス\",     points14: 0.8938, points16: 0.8456, points18: 0.8790, points20: 0.8718, col: \"orchid\"},\n    {country: \"オランダ\",     points14: 0.8897, points16: 0.8659, points18: 0.8757, points20: 0.9228, col: \"lawngreen\"},\n    {country: \"日本\",        points14: 0.8748, points16: 0.8440, points18: 0.8783, points20: 0.8989, col: \"peru\"},\n    {country: \"アメリカ\",     points14: 0.8695,points16: 0.8420, points18: 0.8769, points20: 0.9297, col: \"orange\"},\n    {country: \"イギリス\",     points14: 0.8694, points16: 0.9193, points18: 0.8999, points20: 0.9358, col: \"mediumaquamarine\"},\n    {country: \"ニュージーランド\", points14: 0.8449, points16: 0.8659, points18: 0.8806, points20: 0.9339, col: \"olive\"},\n    {country: \"フィンランド\",  points14: 0.8418, points16: 0.8817, points18: 0.8815, points20: 0.9452, col: \"royalblue\"},\n    {country: \"カナダ\",       points14: 0.8410, points16: 0.8285, points18: 0.8258, points20: 0.8420, col: \"deeppink\"},\n    {country: \"スペイン\",     points14: 0.8357, points16: 0.8135, points18: 0.8415, points20: 0.8801, col: \"khaki\"},\n    {country: \"ノルウェー\",   points14: 0.8225, points16: 0.8117, points18: 0.8557, points20: 0.9064, col: \"orangered\"},\n    {country: \"スウェーデン\", points14: 0.8180, points16: 0.8704, points18: 0.8882, points20: 0.9365, col: \"indigo\"},\n    {country: \"エストニア\",   points14: 0.8162, points16: 0.8334, points18: 0.8486, points20: 0.9473, col: \"darkgreen\"},\n    {country: \"デンマーク\",   points14: 0.8162, points16: 0.8510, points18: 0.9150, points20: 0.9758, col: \"teal\"},\n  ]\n  var flag = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  const add = (event) => {\n    if(flag[event.target.value - 1] === 0){\n      data.push(dataEGDI[event.target.value - 1])\n    }else{\n      data.map((item, i) => {\n        if(item.country === dataEGDI[event.target.value - 1].country){\n          data.splice(i, 1)\n        }\n      })\n    }\n    console.log(data)\n    flag[event.target.value - 1] ^= 1\n  }\n  const drawGraph = (e) => {\n    console.log(props)\n    props.setData(data)\n  }\n  return (\n    <div>\n      <form onreset = \"reset\">\n          <input type = \"checkbox\" value = \"1\" onClick = {add} />\n           韓国　\n          <input type = \"checkbox\" value = \"2\" onClick = {add} />\n          オーストラリア　\n          <input type = \"checkbox\" value = \"3\" onClick = {add} />\n          シンガポール　\n          <input type = \"checkbox\" value = \"4\" onClick = {add} />\n          フランス　\n          <input type = \"checkbox\" value = \"5\" onClick = {add} />\n          オランダ　\n          <input type = \"checkbox\" value = \"6\" onClick = {add} />\n          日本　\n          <input type = \"checkbox\" value = \"7\" onClick = {add} />\n          アメリカ　\n          <br/>\n          <input type = \"checkbox\" value = \"8\" onClick = {add} />\n          イギリス　\n          <input type = \"checkbox\" value = \"9\" onClick = {add} />\n          デンマーク　\n          <input type = \"checkbox\" value = \"10\" onClick = {add} />\n          フィンランド　\n          <input type = \"checkbox\" value = \"11\" onClick = {add} />\n          カナダ　\n          <input type = \"checkbox\" value = \"12\" onClick = {add} />\n          スペイン　\n          <input type = \"checkbox\" value = \"13\" onClick = {add} />\n          ノルウェー　\n          <input type = \"checkbox\" value = \"14\" onClick = {add} />\n          スウェーデン　\n          <br/>\n          <input type = \"checkbox\" value = \"15\" onClick = {add} />\n          エストニア　\n          <input type = \"checkbox\" value = \"16\" onClick = {add} />\n          ニュージーランド\n        <button type = \"reset\" onClick = {drawGraph} >描画</button>\n        </form>\n      </div>\n    )\n}\n\n\nconst Graph2 = () => {\n  \n  \n  const width = 600\n  const height = 800\n  const dataEGDI = [\n    {country: \"韓国\",         points14: 0.9462, points16: 0.8915, points18: 0.9010, points20: 0.9560, col: \"lavender\"},\n    {country: \"オーストラリア\", points14: 0.9103, points16: 0.9143, points18: 0.9053, points20: 0.9432, col: \"slateblue\"},\n    {country: \"シンガポール\",  points14: 0.9076, points16: 0.8828, points18: 0.8812, points20: 0.9150, col: \"firebrick\"},\n    {country: \"フランス\",     points14: 0.8938, points16: 0.8456, points18: 0.8790, points20: 0.8718, col: \"orchid\"},\n    {country: \"オランダ\",     points14: 0.8897, points16: 0.8659, points18: 0.8757, points20: 0.9228, col: \"lawngreen\"},\n    {country: \"日本\",        points14: 0.8748, points16: 0.8440, points18: 0.8783, points20: 0.8989, col: \"peru\"},\n    {country: \"アメリカ\",     points14: 0.8695,points16: 0.8420, points18: 0.8769, points20: 0.9297, col: \"orange\"},\n    {country: \"イギリス\",     points14: 0.8694, points16: 0.9193, points18: 0.8999, points20: 0.9358, col: \"mediumaquamarine\"},\n    {country: \"ニュージーランド\", points14: 0.8449, points16: 0.8659, points18: 0.8806, points20: 0.9339, col: \"olive\"},\n    {country: \"フィンランド\",  points14: 0.8418, points16: 0.8817, points18: 0.8815, points20: 0.9452, col: \"royalblue\"},\n    {country: \"カナダ\",       points14: 0.8410, points16: 0.8285, points18: 0.8258, points20: 0.8420, col: \"deeppink\"},\n    {country: \"スペイン\",     points14: 0.8357, points16: 0.8135, points18: 0.8415, points20: 0.8801, col: \"khaki\"},\n    {country: \"ノルウェー\",   points14: 0.8225, points16: 0.8117, points18: 0.8557, points20: 0.9064, col: \"orangered\"},\n    {country: \"スウェーデン\", points14: 0.8180, points16: 0.8704, points18: 0.8882, points20: 0.9365, col: \"indigo\"},\n    {country: \"エストニア\",   points14: 0.8162, points16: 0.8334, points18: 0.8486, points20: 0.9473, col: \"darkgreen\"},\n    {country: \"デンマーク\",   points14: 0.8162, points16: 0.8510, points18: 0.9150, points20: 0.9758, col: \"teal\"},\n  ]\n  const [data, setData] = useState([])\n  const [flag, setFlag] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n  console.log(data)\n\n  return (\n    <div>\n      {/*\n      <input type = \"checkbox\" value = \"1\" onClick = {add} />\n       韓国　\n      <input type = \"checkbox\" value = \"2\" onClick = {add} />\n      オーストラリア　\n      <input type = \"checkbox\" value = \"3\" onClick = {add} />\n      シンガポール　\n      <input type = \"checkbox\" value = \"4\" onClick = {add} />\n      フランス　\n      <input type = \"checkbox\" value = \"5\" onClick = {add} />\n      オランダ　\n      <input type = \"checkbox\" value = \"6\" onClick = {add} />\n      日本　\n      <input type = \"checkbox\" value = \"7\" onClick = {add} />\n      アメリカ　\n      <input type = \"checkbox\" value = \"8\" onClick = {add} />\n      イギリス　\n      <input type = \"checkbox\" value = \"9\" onClick = {add} />\n      デンマーク　\n      <input type = \"checkbox\" value = \"10\" onClick = {add} />\n      フィンランド　\n      <input type = \"checkbox\" value = \"11\" onClick = {add} />\n      カナダ　\n      <input type = \"checkbox\" value = \"12\" onClick = {add} />\n      スペイン　\n      <input type = \"checkbox\" value = \"13\" onClick = {add} />\n      ノルウェー　\n      <input type = \"checkbox\" value = \"14\" onClick = {add} />\n      スウェーデン　\n      <input type = \"checkbox\" value = \"15\" onClick = {add} />\n      エストニア　\n      <input type = \"checkbox\" value = \"16\" onClick = {add} />\n      ニュージーランド\n    */}\n      <SelectCountry setData = {data, setData} data = {data}/>\n    <svg width={width} height={height}>\n      <g transform=\"translate(40,140) scale(0.9)\">\n      \n        <text transform=\"translate(0, -80) rotate(-30)\">韓国</text><ellipse cx = {-45} cy = {-82} rx = \"3\" ry = \"3\" fill = \"lavender\"/>\n        <text transform=\"translate(50, -80) rotate(-30)\">オーストラリア</text><ellipse cx = {5} cy = {-82} rx = \"3\" ry = \"3\" fill = \"slateblue\"/>\n        <text transform=\"translate(100, -80) rotate(-30)\">シンガポール</text><ellipse cx = {55} cy = {-82} rx = \"3\" ry = \"3\" fill = \"firebrick\"/>\n        <text transform=\"translate(150, -80) rotate(-30)\">フランス</text><ellipse cx = {105} cy = {-82} rx = \"3\" ry = \"3\" fill = \"orchid\"/>\n        <text transform=\"translate(200, -80) rotate(-30)\">オランダ</text><ellipse cx = {155} cy = {-82} rx = \"3\" ry = \"3\" fill = \"lawngreen\"/>\n        <text transform=\"translate(250, -80) rotate(-30)\">日本</text><ellipse cx = {205} cy = {-82} rx = \"3\" ry = \"3\" fill = \"peru\"/>\n        <text transform=\"translate(300, -80) rotate(-30)\">アメリカ</text><ellipse cx = {255} cy = {-82} rx = \"3\" ry = \"3\" fill = \"orange\"/>\n        <text transform=\"translate(350, -80) rotate(-30)\">イギリス</text><ellipse cx = {305} cy = {-82} rx = \"3\" ry = \"3\" fill = \"mediumaquamarine\"/>\n        <text transform=\"translate(0, 0) rotate(-30)\">デンマーク</text><ellipse cx = {-45} cy = {2} rx = \"3\" ry = \"3\" fill = \"teal\"/>\n        <text transform=\"translate(50 , 0) rotate(-30)\">フィンランド</text><ellipse cx = {5} cy = {2} rx = \"3\" ry = \"3\" fill = \"royalblue\"/>\n        <text transform=\"translate(100, 0) rotate(-30)\">カナダ</text><ellipse cx = {55} cy = {2} rx = \"3\" ry = \"3\" fill = \"deeppink\"/>\n        <text transform=\"translate(150, 0) rotate(-30)\">スペイン</text><ellipse cx = {105} cy = {0} rx = \"3\" ry = \"3\" fill = \"khaki\"/>\n        <text transform=\"translate(200, 0) rotate(-30)\">ノルウェー</text><ellipse cx = {155} cy = {0} rx = \"3\" ry = \"3\" fill = \"orangered\"/>\n        <text transform=\"translate(250, 0) rotate(-30)\">スウェーデン</text><ellipse cx = {205} cy = {0} rx = \"3\" ry = \"3\" fill = \"indigo\"/>\n        <text transform=\"translate(300, 0) rotate(-30)\">エストニア</text><ellipse cx = {255} cy = {0} rx = \"3\" ry = \"3\" fill = \"darkgreen\"/>\n        <text transform=\"translate(350, 0) rotate(-30)\">ニュージーランド</text><ellipse cx = {305} cy = {0} rx = \"3\" ry = \"3\" fill = \"olive\"/>     \n      \n        <line x1=\"0\" y1=\"30\" x2=\"0\" y2={height/2+150} stroke=\"black\" />\n        <line x1={width-45} y1=\"30\" x2={width-45} y2={height/2+150} stroke=\"black\" />\n        <line x1=\"0\" y1={height/2+150} x2={width-45} y2={height/2+150} stroke=\"black\" />\n  \n        <line x1=\"-10\" y1=\"40\" x2=\"0\" y2=\"40\" stroke=\"black\" /><text x=\"-10\"  y=\"44\" textAnchor=\"end\" font-size=\"13\">1.0</text>\n        <line x1=\"-10\" y1=\"260\" x2=\"0\" y2=\"260\" stroke=\"black\" /><text x=\"-10\"  y=\"264\" textAnchor=\"end\" font-size=\"13\">0.9</text>\n        <line x1=\"-10\" y1=\"480\" x2=\"0\" y2=\"480\" stroke=\"black\" /><text x=\"-10\"  y=\"484\" textAnchor=\"end\" font-size=\"13\">0.8</text>\n        <text x=\"-10\"  y={height/2+150\n        \n        } textAnchor=\"end\" font-size=\"13\">0</text>\n        <path d=\"M-30 510 C -5 490, 0 490, 15 510 S40 540, 55 510\" stroke=\"black\" fill=\"transparent\"/>\n        <path d=\"M-30 520 C -5 500, 0 500, 15 520 S40 550, 55 520\" stroke=\"black\" fill=\"transparent\"/>\n  \n        <line x1=\"15\" y1={height/2+150} x2=\"15\" y2={height/2+160} stroke=\"black\" /><text x=\"15\"  y={height/2+169} textAnchor=\"middle\" font-size=\"13\">2014</text>\n        <line x1=\"190\" y1={height/2+150} x2=\"190\" y2={height/2+160} stroke=\"black\" /><text x=\"190\"  y={height/2+169} textAnchor=\"middle\" font-size=\"13\">2016</text>\n        <line x1=\"365\" y1={height/2+150} x2=\"365\" y2={height/2+160} stroke=\"black\" /><text x=\"365\"  y={height/2+169} textAnchor=\"middle\" font-size=\"13\">2018</text>\n        <line x1=\"540\" y1={height/2+150} x2=\"540\" y2={height/2+160} stroke=\"black\" /><text x=\"540\"  y={height/2+169} textAnchor=\"middle\" font-size=\"13\">2020</text>\n        \n        {data.map((item, i) => {\n            {console.log(item.country)}\n            return (\n              <g transform=\"translate(0,0)\">\n                \n                 \n                <line x1 = {15} y1 = {(height/2+40)-(item.points14*2200-1760)} x2 = {190} y2 = {(height/2+40)-(item.points16*2200-1760)} stroke={item.col}/>\n                <line x1 = {190} y1 = {(height/2+40)-(item.points16*2200-1760)} x2 = {365} y2 = {(height/2+40)-(item.points18*2200-1760)} stroke={item.col}/>\n                <line x1 = {365} y1 = {(height/2+40)-(item.points18*2200-1760)} x2 = {540} y2 = {(height/2+40)-(item.points20*2200-1760)} stroke={item.col}/>\n                \n                <ellipse\n                    cx = {15}\n                    cy = {(height/2+40)-(item.points14*2200-1760)}\n                    rx = \"3\"\n                    ry = \"3\"\n                    fill = {item.col}\n                />\n                <ellipse\n                    cx = {190}\n                    cy = {(height/2+40)-(item.points16*2200-1760)}\n                    rx = \"3\"\n                    ry = \"3\"\n                    fill = {item.col}\n                />\n                <ellipse\n                    cx = {365}\n                    cy = {(height/2+40)-(item.points18*2200-1760)}\n                    rx = \"3\"\n                    ry = \"3\"\n                    fill = {item.col}\n                />\n                <ellipse\n                    cx = {540}\n                    cy = {(height/2+40)-(item.points20*2200-1760)}\n                    rx = \"3\"\n                    ry = \"3\"\n                    fill = {item.col}\n                />            \n              </g>\n            );\n          })}\n      </g>\n    </svg>\n    </div>\n  );\n  };\n  \nconst Graph1 = () => {\n  \n  \n  const width = 600\n  const height = 800\n  var preInt = height\n  var preIntO = height\n  \n  const dataInternet = [\n    {year: 2010, point: 0.78, pointOld: 0.4665, population: 11103, population65: 2923},\n    {year: 2011, point: 0.782, pointOld: 0.5077, population: 11123, population65: 2953},\n    {year: 2012, point: 0.791, pointOld: 0.5137, population: 11113, population65: 3007},\n    {year: 2013, point: 0.795, pointOld: 0.5387, population: 11106, population65: 3119},\n    {year: 2014, point: 0.828, pointOld: 0.5632, population: 11107, population65: 3227},\n    {year: 2015, point: 0.83, pointOld: 0.5697, population: 11111, population65: 3334},\n    {year: 2016, point: 0.835, pointOld: 0.575, population: 11110, population65: 3414},\n    {year: 2017,  point: 0.806, pointOld: 0.5387, population: 11102, population65: 3479},\n    {year: 2018,  point: 0.798, pointOld: 0.5675, population: 11097, population65: 3530},\n    {year: 2019,  point: 0.898, pointOld: 0.7825, population: 11093, population65: 3568},\n  ]\n  \n  return (\n  \n  <svg width={width} height={height}>\n    <g transform=\"translate(50,50) scale(0.9)\">\n      <line x1=\"0\" y1=\"0\" x2=\"0\" y2={height/2+150} stroke=\"black\" />\n      <line x1=\"0\" y1={height/2+150} x2={width-45} y2={height/2+150} stroke=\"black\" />\n      <line x1=\"0\" y1={0} x2={width-45} y2={0} stroke=\"silver\" />\n      <line x1=\"0\" y1={110} x2={width-45} y2={110} stroke=\"silver\" />\n      <line x1=\"0\" y1={220} x2={width-45} y2={220} stroke=\"silver\" />\n      <line x1=\"0\" y1={330} x2={width-45} y2={330} stroke=\"silver\" />\n      <line x1=\"0\" y1={440} x2={width-45} y2={440} stroke=\"silver\" />\n\n      <ellipse\n        cx = {width-30}\n        cy = {130}\n        rx = \"5\"\n        ry = \"5\"\n        fill = \"skyblue\"\n      />\n      <text x={width-24}  y={130} textAnchor=\"start\" font-size=\"13\">高齢者</text>\n\n      <ellipse\n        cx = {width-30}\n        cy = {55}\n        rx = \"5\"\n        ry = \"5\"\n        fill = \"orange\"\n      />\n      <text x={width-24}  y={55} textAnchor=\"start\" font-size=\"13\">全体</text>\n\n      <text x=\"-10\"  y={0} textAnchor=\"end\" font-size=\"13\">100</text>\n      <text x=\"-10\"  y={110} textAnchor=\"end\" font-size=\"13\">80</text>\n      <text x=\"-10\"  y={220} textAnchor=\"end\" font-size=\"13\">60</text>\n      <text x=\"-10\"  y={330} textAnchor=\"end\" font-size=\"13\">40</text>\n      <text x=\"-10\"  y={440} textAnchor=\"end\" font-size=\"13\">20</text>\n      <text x=\"-10\"  y={height/2+150} textAnchor=\"end\" font-size=\"13\">0</text>\n    \n            <g transform=\"translate(0,0)\"> \n             {dataInternet.map((item, i) => {\n              preInt = dataInternet[Math.max(0, i - 1)][\"point\"]\n              preIntO = dataInternet[Math.max(0, i - 1)][\"pointOld\"]\n                return (\n                  <g key={item.year} transform=\"translate(30,0)\">\n                    <line x1 = {Math.max(0, 53 * (i - 1))} y1 = {(height/2+150)-550*preInt} x2 = {53*i} y2 = {(height/2+150)-550*item.point} stroke=\"orange\"/>\n                    <ellipse\n                        cx = {53*i}\n                        cy = {(height/2+150)-550*item.point}\n                        rx = \"3\"\n                        ry = \"3\"\n                        fill = \"orange\"\n                    />\n\n                    <line x1 = {Math.max(0, 53 * (i - 1))} y1 = {(height/2+150)-550*preIntO} x2 = {53*i} y2 = {(height/2+150)-550*item.pointOld} stroke=\"skyblue\"/>\n                    <ellipse\n                        cx = {53*i}\n                        cy = {(height/2+150)-550*item.pointOld}\n                        rx = \"3\"\n                        ry = \"3\"\n                        fill = \"skyblue\"\n                    />\n                    <text x={53*i} y={height/2+163} font-size=\"13\" textAnchor=\"start\"　>\n                     {item.year}\n                    </text>\n                   </g>             \n                );\n              })}      \n            </g>\n    </g>\n  </svg>\n);\n};\n\nconst Graph3 = () => {\n  \n  \n  const width = 600\n  const height = 900\n  const barHeight = 20;\n  \n  \n  const dataOnline = [\n    {ministry: \"国土交通省\",    total: 10628, online: 297, p: 2.8, col1: \"royalblue\", col2: \"seagreen\"},\n    {ministry: \"厚生労働省\",    total: 9240, online: 1037, p: 11.3, col1: \"royalblue\", col2: \"seagreen\"},\n    {ministry: \"経済産業省\",    total: 6666, online: 519, p: 7.8, col1: \"royalblue\", col2: \"seagreen\"},\n    {ministry: \"財務省省\",      total: 5645, online: 1358, p: 24.1, col1: \"royalblue\", col2: \"seagreen\"},\n    {ministry: \"総務省\",        total: 4858, online: 388, p: 8.0, col1: \"royalblue\", col2: \"seagreen\"},\n    {ministry: \"農林水産省\",     total: 4764, online: 60, p: 1.3, col1: \"royalblue\", col2: \"seagreen\"},\n    {ministry: \"金融庁\",        total: 4158, online: 168, p: 4.0, col1: \"royalblue\", col2: \"seagreen\"},\n    {ministry: \"法務省\",        total: 1067, online: 34, p: 4.5, col1: \"royalblue\", col2: \"seagreen\"},\n    {ministry: \"国家公安委員会\", total: 1675, online: 76, p: 3.2, col1: \"royalblue\", col2: \"seagreen\"},\n  ]\n  const dataProcedure = [\n    {name: \"法令上オンライン可\", p:93, col1: \"hotpink\", col2: \"lime\"},\n    {name: \"手続種類数\", p:13, col1: \"hotpink\", col2: \"lime\"},\n    {name: \"オンライン利用率\", p:57, col1: \"hotpink\", col2: \"lime\"}\n  ]\n  \n  return (\n  \n  <svg width={width} height={height}>\n    <g transform=\"translate(50,50) scale(0.8)\">\n      <line x1=\"0\" y1=\"0\" x2=\"0\" y2={height/2+150} stroke=\"black\" />\n      <line x1=\"0\" y1={height/2+150} x2={width-45} y2={height/2+150} stroke=\"black\" />\n      <line x1=\"0\" y1={0} x2={width-45} y2={0} stroke=\"silver\" />\n      <line x1=\"0\" y1={100} x2={width-45} y2={100} stroke=\"silver\" />\n      <line x1=\"0\" y1={200} x2={width-45} y2={200} stroke=\"silver\" />\n      <line x1=\"0\" y1={300} x2={width-45} y2={300} stroke=\"silver\" />\n      <line x1=\"0\" y1={400} x2={width-45} y2={400} stroke=\"silver\" />\n      <line x1=\"0\" y1={500} x2={width-45} y2={500} stroke=\"silver\" />\n\n      <text x=\"-10\"  y={0} textAnchor=\"end\" font-size=\"13\">（件）</text>\n      <text x=\"-10\"  y={100} textAnchor=\"end\" font-size=\"13\">1万</text>\n      <text x=\"-10\"  y={200} textAnchor=\"end\" font-size=\"13\">8千</text>\n      <text x=\"-10\"  y={300} textAnchor=\"end\" font-size=\"13\">6千</text>\n      <text x=\"-10\"  y={400} textAnchor=\"end\" font-size=\"13\">4千</text>\n      <text x=\"-10\"  y={500} textAnchor=\"end\" font-size=\"13\">2千</text>\n      <text x=\"-10\"  y={height/2+150} textAnchor=\"end\" font-size=\"13\">0</text>\n    \n      <g transform=\"translate(0,0)\">\n        {dataOnline.map((item, i) => {\n          return (\n            <g key={item.ministry} transform={`translate(${60 * (i + 1)},0)`}>\n              <rect\n                x={-barHeight}\n                y={600-(item.total/20)}\n                width={barHeight}\n                height={(item.total/20)}\n                fill={item.col1}\n              />\n              <rect\n                x={-barHeight}\n                y={600-(item.online/20)}\n                width={barHeight}\n                height={(item.online/20)}\n                fill={item.col2}\n              />\n              <text x=\"-12\" y={600-(item.online/20)} textAnchor=\"middle\" fill=\"red\" font-size=\"20\">\n                {item.p}\n              </text>\n              <text x=\"5\" y={600-(item.online/20)} textAnchor=\"start\" fill=\"red\" font-size=\"12\">\n                {\"%\"}\n              </text>\n              <text x=\"-12\" y={height/2+150} textAnchor=\"start\"　writing-mode=\"tb\">\n                {item.ministry}\n              </text>\n              </g>             \n          );\n        })}\n        <g>\n          \n          <line x1=\"-5\" y1={750} x2={550} y2={750} stroke=\"black\" />\n          <line x1=\"-5\" y1={1000} x2={550} y2={1000} stroke=\"black\" /> \n          <line x1=\"550\" y1={750} x2={550} y2={1000} stroke=\"black\" /> \n          <line x1={50} y1={780} x2={50} y2={1000} stroke=\"silver\" /><text x={50}  y={777} textAnchor=\"middle\" font-size=\"13\" fill=\"gray\">0%</text>\n          <line x1={140} y1={780} x2={140} y2={1000} stroke=\"silver\" /><text x={140}  y={777} textAnchor=\"middle\" font-size=\"13\" fill=\"gray\">20%</text>\n          <line x1={230} y1={780} x2={230} y2={1000} stroke=\"silver\" /><text x={230}  y={777} textAnchor=\"middle\" font-size=\"13\" fill=\"gray\">40%</text>\n          <line x1={320} y1={780} x2={320} y2={1000} stroke=\"silver\" /><text x={320}  y={777} textAnchor=\"middle\" font-size=\"13\" fill=\"gray\">60%</text>\n          <line x1={410} y1={780} x2={410} y2={1000} stroke=\"silver\" /><text x={410}  y={777} textAnchor=\"middle\" font-size=\"13\" fill=\"gray\">80%</text>\n          <line x1={500} y1={780} x2={500} y2={1000} stroke=\"silver\" /><text x={500}  y={777} textAnchor=\"middle\" font-size=\"13\" fill=\"gray\">100%</text> \n          \n          {dataProcedure.map((item, i) => {\n          return (\n            <g key={item.p} transform={`translate(50,${20 * i })`}>\n              <text x={-2}  y={785+50*(i+1)} textAnchor=\"end\" font-size=\"12\" fill=\"black\">{item.name}</text>\n              <rect\n                x={0}\n                y={750+50*(i+1)}\n                width={450}\n                height={50}\n                fill={item.col1}\n              />\n              <rect\n                x={0}\n                y={750+50*(i+1)}\n                width={item.p*4.5}\n                height={50}\n                fill={item.col2}\n              />\n              <text x={item.p*4.5/2}  y={785+50*(i+1)} textAnchor=\"middle\" font-size=\"30\" fill=\"red\">{item.p}%</text>\n            </g>\n              );\n            })}     \n        </g>     \n      </g>\n    </g>\n  </svg>\n);\n};\n\nconst Graph4 = () => {\n  \n  \n  const width = 600\n  const height = 800\n  var pre1 = height\n  const barHeight = 50\n  \n  const dataMynumber = [\n    {year: 2016, point: 6.3, num: 8347992},\n    {year: 2017, point: 8.4, num: 10717919},\n    {year: 2018, point: 10.7, num: 13672762},\n    {year: 2019, point: 13.0, num: 16572762},\n    {year: 2020, point: 15.0, num: 19101271},\n  ]\n  \n  return (\n  \n  <svg width={width} height={height}>\n    <g transform=\"translate(30,50) scale(0.9)\">\n      <line x1={0} y1={0} x2={0} y2={height/2+150} stroke=\"black\" />\n      <line x1={0} y1={height/2+150} x2={width-45} y2={height/2+150} stroke=\"black\" />\n      <line x1={width-45} y1={0} x2={width-45} y2={height/2+150} stroke=\"black\" />\n\n      <line x1=\"0\" y1={0} x2={width-45} y2={0} stroke=\"silver\" />\n      <line x1=\"0\" y1={110} x2={width-45} y2={110} stroke=\"silver\" />\n      <line x1=\"0\" y1={220} x2={width-45} y2={220} stroke=\"silver\" />\n      <line x1=\"0\" y1={330} x2={width-45} y2={330} stroke=\"silver\" />\n      <line x1=\"0\" y1={440} x2={width-45} y2={440} stroke=\"silver\" />\n\n      <text x=\"-2\"  y={50} textAnchor=\"end\" font-size=\"12\">(万枚)</text>\n      <text x=\"-2\"  y={110} textAnchor=\"end\" font-size=\"13\">2000</text>\n      <text x=\"-2\"  y={220} textAnchor=\"end\" font-size=\"13\">1500</text>\n      <text x=\"-2\"  y={330} textAnchor=\"end\" font-size=\"13\">1000</text>\n      <text x=\"-2\"  y={440} textAnchor=\"end\" font-size=\"13\">500</text>\n      <text x=\"-2\"  y={height/2+150} textAnchor=\"end\" font-size=\"13\">0</text>\n      <text x={width-40}  y={550} textAnchor=\"start\" font-size=\"13\">0</text>\n      <text x={width-40}  y={440} textAnchor=\"start\" font-size=\"13\">5</text>\n      <text x={width-40}  y={330} textAnchor=\"start\" font-size=\"13\">10</text>\n      <text x={width-40}  y={220} textAnchor=\"start\" font-size=\"13\">15</text>\n      <text x={width-40}  y={110} textAnchor=\"start\" font-size=\"13\">20</text>\n      <text x={width-40}  y={90} textAnchor=\"start\" font-size=\"13\">(%)</text>\n    \n            <g transform=\"translate(0,0)\"> \n             {dataMynumber.map((item, i) => {\n              pre1 = dataMynumber[Math.max(0, i - 1)][\"point\"]\n                return (\n                  <g key={item.year} transform=\"translate(75,0)\">\n                    <rect\n                      x={100*i-25}\n                      y={(height/2+149)-((item.num)/10000*0.22)}\n                      width={barHeight}\n                      height={((item.num)/10000*0.22)}\n                      fill={\"lightblue\"}\n                    />\n                    <line x1 = {Math.max(0, 100 * (i-1))} y1 = {(height/2+150)-22*pre1} x2 = {100*i} y2 = {(height/2+150)-22*item.point} stroke=\"orange\"/>\n                    <ellipse\n                        cx = {100*i}\n                        cy = {(height/2+150)-22*item.point}\n                        rx = \"3\"\n                        ry = \"3\"\n                        fill = \"orange\"\n                    />\n                    <text x={100*i-10} y={(height/2+140)-22*item.point} font-size=\"13\" textAnchor=\"start\"　>{item.point}</text>\n                    <text x={100*i-15} y={height/2+163} font-size=\"13\" textAnchor=\"start\"　>\n                     {item.year}\n                    </text>\n                  </g>            \n                );\n              })}      \n            </g>\n    </g>\n  </svg>\n );\n};\n\nconst Graph5 = () => {\n  \n  \n  const width = 600\n  const height = 900\n  const barHeight = 40;\n  \n  \n  const dataOutflow= [\n    {job: \"建設業\",    out: 17.5, in: 28.8},\n    {job: \"製造業\",    out: 27.3, in: 29.5},\n    {job: \"情報通信業\", out: 33.5, in: 73.7},\n    {job: \"運輸業、郵便業\", out: 19.3, in: 36.7},\n    {job: \"卸売業、小売業\", out: 23.7, in: 20.8},\n    {job: \"金融業、保険業\",    out: 48.6, in: 54.3},\n    {job: \"不動産業、物品賃貸業\",    out: 26.3, in: 47.4},\n    {job: \"学術研究、専門・技術サービス業\", out: 16.2, in: 14.1},\n    {job: \"宿泊業、飲食サービス業\", out: 19.9, in: 14.5},\n    {job: \"生活関連サービス業，娯楽業\", out: 3.1, in: 6.0},\n    {job: \"教育，学習支援業\", out: 60.1, in: 66.5},\n    {job: \"医療，福祉\", out: 34.5, in: 27.7},\n    {job: \"サービス業(他に分類されないもの)\", out: 23.1, in: 25.9},\n  ]\n  \n  \n  return (\n  \n  <svg width={width} height={height}>\n    <g transform=\"translate(100,50) scale(0.7)\">\n      <line x1={-10} y1={0} x2={-10} y2={height} stroke=\"black\" />\n      <line x1={-10} y1={height} x2={500} y2={height} stroke=\"black\" />\n      <line x1={83} y1={0} x2={83} y2={height} stroke=\"silver\" />\n      <line x1={166} y1={0} x2={166} y2={height} stroke=\"silver\" />\n      <line x1={250} y1={0} x2={250} y2={height} stroke=\"silver\" />\n      <line x1={332} y1={0} x2={332} y2={height} stroke=\"silver\" />\n      <line x1={416} y1={0} x2={416} y2={height} stroke=\"silver\" />\n      <line x1={500} y1={0} x2={500} y2={height} stroke=\"silver\" />\n\n      <text x={0}  y={-10} textAnchor=\"middle\" font-size=\"13\">75</text>\n      <text x={83}  y={-10} textAnchor=\"middle\" font-size=\"13\">50</text>\n      <text x={166}  y={-10} textAnchor=\"middle\" font-size=\"13\">25</text>\n      <text x={250}  y={-10} textAnchor=\"middle\" font-size=\"13\">0</text>\n      <text x={332}  y={-10} textAnchor=\"middle\" font-size=\"13\">▲25</text>\n      <text x={416}  y={-10} textAnchor=\"middle\" font-size=\"13\">▲50</text>\n      <text x={500}  y={-10} textAnchor=\"middle\" font-size=\"13\">▲75</text>\n\n      <g transform=\"translate(50,40)\">\n        {dataOutflow.map((item, i) => {\n          return (\n          <div>\n            <g key={item.job} transform=\"tranlate(0,0)\">\n              <text x=\"-100\" y={50*(i+1)} textAnchor=\"middle\" fill=\"black\" font-size=\"13\">{item.job}</text>\n            </g>\n            <g key={item.job} transform={`translate(0,${20 * (i + 1)})`}>\n              <rect\n                x={200-(item.in*3.32)}\n                y={40*i}\n                width={item.in*3.32}\n                height={barHeight}\n                fill={\"palevioletred\"}\n              />\n              <rect\n                x={200}\n                y={40*i}\n                width={item.out*3.32}\n                height={barHeight}\n                fill={\"deepskyblue\"}\n              />\n              \n              </g> \n              </div>            \n          );\n        })}     \n      </g>\n    </g>\n  </svg>\n);\n};\n\n\nconst NameForm = (props) => {\n  const data = [\"Italy\",   \"America\", \"Germany\", \"Korea\", \"England\", \"Switzerland\", \"Luxembourg\", \"France\", \"Canada\"]\n\n  const change = (event) => {\n    props.setContry(data[event.target.value - 1])\n  }\n  return (\n    <form> \n     <div class=\"select\">\n      <select onChange = {change}>\n         <option value=\"0\">----</option>\n         <option value=\"1\">イタリア</option>\n         <option value=\"2\">アメリカ</option>\n         <option value=\"3\">ドイツ</option>\n         <option value=\"4\">韓国</option>\n         <option value=\"5\">イングランド</option>\n         <option value=\"6\">スイス</option>\n         <option value=\"7\">ルクセンブルク</option>\n         <option value=\"8\">フランス</option>\n         <option value=\"9\">カナダ</option>\n      </select>\n     </div>  \n    </form>  \n  );\n}\n\nconst Graph = ({props}) =>{\n  const width = 700\n  const height = 565\n\n\n  const data = [\n    {year: 1970, Italy: 4154, America: 6093, Germany: 5292, Korea: 754, England: 4172, Switzerland: 8229, Luxembourg: 6377, France: 4368, Canada: 5415, Japan: 3990},\n    {year: 1980, Italy: 9795, America: 12547, Germany: 11647, Korea: 2401,England: 8446, Switzerland: 15468, Luxembourg: 12729, France: 9671, Canada: 11749, Japan: 8798},\n    {year: 1985, Italy: 13707, America: 18192, Germany: 16219, Korea: 4528, England: 12210, Switzerland: 21031, Luxembourg: 18467, France: 13149, Canada: 16343, Japan: 13462}, \n    {year: 1990, Italy: 18609, America: 23835, Germany: 21471, Korea: 8273, England: 16701, Switzerland: 27267, Luxembourg: 29660, France: 17618, Canada: 20246, Japan: 19549},\n    {year: 1995, Italy: 22360, America: 28658, Germany: 23689, Korea: 13299, England: 20433, Switzerland: 29672, Luxembourg: 39550, France: 20750, Canada: 23476, Japan: 23410},\n    {year: 2000, Italy: 26076, America: 36305, Germany: 27551, Korea: 18083, England: 26258, Switzerland: 35434, Luxembourg: 55263, France: 26098, Canada: 29363, Japan: 26841},\n    {year: 2005, Italy: 30016, America: 44044, Germany: 32414, Korea: 24196, England: 32486, Switzerland: 40327, Luxembourg: 68414, France: 30504, Canada: 36329, Japan: 31668},\n    {year: 2010, Italy: 34831, America: 48396, Germany: 39916, Korea: 30365, England: 36016, Switzerland: 52860, Luxembourg: 85515, France: 35909, Canada: 40106, Japan: 34994},\n    {year: 2015, Italy: 36909, America: 56770, Germany: 47979, Korea: 35761, England: 42055, Switzerland: 63939, Luxembourg: 103788, France: 40841, Canada: 44671, Japan: 40406},\n    {year: 2018, Italy: 41837, America: 62853, Germany: 53749, Korea: 40096, England: 45505, Switzerland: 68079, Luxembourg: 113137, France: 45149, Canada: 48107, Japan: 42823},\n  ]\n\n  const data2 = [\n    {year: 1970, Italy: 10157, America: 13642, Germany: 10376, Korea: 0, England: 8113, Switzerland: 0,Luxembourg: 13117, France: 9424, Canada: 12627, Japan: 6700},\n    {year: 1980, Italy: 27213, America: 28774, Germany: 26499, Korea: 0, England: 19028, Switzerland: 0, Luxembourg: 29267, France: 24875, Canada: 26224, Japan: 18604},\n    {year: 1985, Italy: 37826, America: 40495, Germany: 37173, Korea: 12342, England: 28465, Switzerland: 0, Luxembourg: 41947, France: 35264, Canada: 36322, Japan: 28062},\n    {year: 1990, Italy: 49751, America: 50198, Germany: 47680, Korea: 19612, England: 35645, Switzerland: 0, Luxembourg: 60108, France: 44500, Canada: 42842, Japan: 38668},\n    {year: 1995, Italy: 64028, America: 61167, Germany: 53831, Korea: 29376, England: 46514, Switzerland: 0, Luxembourg: 74946, France: 53905, Canada: 51740, Japan: 45480},\n    {year: 2000, Italy: 73140, America: 74849, Germany: 61934, Korea: 40148, England: 56502, Switzerland: 66224, Luxembourg: 91456, France: 64537, Canada: 61044, Japan: 52810},\n    {year: 2005, Italy: 77951, America: 91982, Germany: 72506, Korea: 51066, England: 68290, Switzerland: 75919, Luxembourg: 103134, France: 77124, Canada: 72647, Japan: 63651},\n    {year: 2010, Italy: 92509, America: 107807, Germany: 84347, Korea: 62611, England: 77610, Switzerland: 98690, Luxembourg: 120710, France: 90727, Canada: 80394, Japan: 71144},\n    {year: 2015, Italy: 99780, America: 122451, Germany: 97468, Korea: 69690, England: 87771, Switzerland: 116686, Luxembourg: 145515, France: 102908, Canada: 88869, Japan: 80231},\n    {year: 2018, Italy: 108890, America: 132127, Germany: 106315, Korea: 77219, England: 93482, Switzerland: 123979, Luxembourg: 153423, France: 111988, Canada: 95553,Japan: 81258},\n  ]\n\n  const color = {\n    Japan: \"black\", \n    America: \"blue\",\n    Italy: \"#00CC99\",\n    Germany: \"red\", \n    Korea: \"blue\", \n    England: \"red\", \n    Switzerland: \"red\", \n    Luxembourg: \"cyan\", \n    Canada: \"red\",\n    France: \"blue\",\n  }\n\n  const berHeight = 10;\n  const contry = props\n  var mx = Math.max(Math.ceil(Math.max(...data.map((item) => item[contry])) / 10000) * 10000, Math.ceil(Math.max(...data.map((item) => item.Japan)) / 10000) * 10000)\n  var mx2 = Math.max(Math.ceil(Math.max(...data2.map((item) => item[contry])) / 10000) * 10000, Math.ceil(Math.max(...data2.map((item) => item.Japan)) / 10000) * 10000)\n  var japanPre = height;\n  var contPre = height;\n  var japanPre2, contPre2;\n  return (\n    <div id = \"link1\">\n      <section className = \"section\">\n\n        <p>こちらがGDPのグラフ</p>\n        <svg width = {width} height = {height}>\n        <g transform=\"scale(0.7)\">\n            <g transform = \"translate(60, -30)\">\n                <g>\n                    <line\n                    x1 = \"0\"\n                    y1 = \"0\"\n                    x2 = \"0\"\n                    y2 = {height}\n                    stroke = \"#888\"\n                    strokeWidth = \"2\"\n                     />\n                </g>\n                <g>\n                  <line\n                  x1 = \"0\"\n                  y1 = {height - 15}\n                  x2 = {width - 200}\n                  y2 = {height - 15}\n                  stroke = \"#888\"\n                  strokeWidth = \"2\"\n                  />\n                </g>\n                <g>\n                  <ellipse\n                  cx = {width - 180}\n                  cy = {height / 4}\n                  rx = \"4\"\n                  ry = \"4\"\n                  fill = {color[contry]}\n                  />\n                  <text\n                  x = {width - 170 + contry.length * 8}\n                  y = {height / 4}\n                  textAnchor = \"end\"\n                  dominantBaseline = \"central\"\n                  >\n                  {contry}\n                  </text>\n\n                  <ellipse\n                  cx = {width - 180}\n                  cy = {height / 4 + berHeight * 2}\n                  rx = \"4\"\n                  ry = \"4\"\n                  fill = {color.Japan}\n                  />\n                  <text\n                  x = {width - 130}\n                  y = {height / 4 + 20}\n                  textAnchor = \"end\"\n                  dominantBaseline = \"central\"\n                  >\n                  {\"Japan\"}\n                  </text>\n                </g>\n                <g>\n                {data.map((item, i) =>{\n                  contPre = data[Math.max(0, i - 1)][contry]\n                  japanPre = data[Math.max(0, i - 1)][\"Japan\"]\n                return (\n                    <g>\n                      \n                      <g>\n                        <line\n                          x1 = {Math.max(0, 50 * (i - 1))}\n                          y1 = {height - contPre / mx * (height - 65) - 15}\n                          x2 = {50 * (i)}\n                          y2 = {height - item[contry] / mx * (height -65) - 15}\n                          stroke = \"#888\"\n                          \n                          />\n                        <line\n                          x1 = {Math.max(0, 50 * (i - 1))}\n                          y1 = {height - japanPre / mx * (height - 65) - 15}\n                          x2 = {50 * i}\n                          y2 = {height - item.Japan / mx * (height - 65) - 15}\n                          stroke = \"#888\"\n                          fill = {color.Japan}\n                          />\n                      </g>\n                      <g\n                      key = {item.year}\n                      transform = {`translate(${50 * (i)}, 0)`}\n                      >\n                      <ellipse\n                        cx = {0}\n                        cy = {height - item[contry] / mx * (height - 65) - 15}\n                        rx = \"3\"\n                        ry = \"3\"\n                        fill = {color[contry]}\n                      />\n                      <ellipse\n                        cx = {0}\n                        cy = {height - item.Japan / mx * (height - 65) - 15}\n                        rx = \"3\"\n                        ry = \"3\"\n                        fill = {color.Japan}\n                        />\n                      <text\n                          x = \"15\"\n                          y = {height + 15}\n                          textAnchor = \"end\"\n                          dominantBaseline = \"central\"\n                      >\n                          {item.year}\n                      </text>\n                      </g>\n                      <g\n                        key = {5000 * i}\n                        transform = {`translate(0, ${-50 * (i + 1)})`}\n                      >\n                      <line\n                          x1 = \"0\"\n                          y1 = {height - 15}\n                          x2 = {width - 200}\n                          y2 = {height - 15}\n                          stroke = \"#888\"\n                      />\n                      <text\n                          x = \"-5\"\n                          y = {height - 15}\n                          textAnchor = \"end\"\n                          dominantBaseline = \"central\"\n                          >\n                          {mx / 10 * (i + 1)}\n                          </text>\n                      </g>\n                    <text\n                    x = \"-5\"\n                    y = {height - 15}\n                    textAnchor = \"end\"\n                    dominantBaseline = \"central\"\n                    >\n                    {0}\n                    </text>\n                    </g>\n                )\n            })}\n            \n          </g>\n          \n        </g>\n        </g>\n        </svg>\n\n      <p>こちらは労働生産性のグラフ</p>\n        <svg width = {width} height = {height} id = \"link2\">\n          <g transform = \"scale(0.7)\">\n            <g transform = \"translate(60, -30)\">\n                <g>\n                    <line\n                    x1 = \"0\"\n                    y1 = \"0\"\n                    x2 = \"0\"\n                    y2 = {height}\n                    stroke = \"#888\"\n                    strokeWidth = \"2\"\n                     />\n                </g>\n                <g>\n                  <line\n                  x1 = \"0\"\n                  y1 = {height - 15}\n                  x2 = {width - 200}\n                  y2 = {height - 15}\n                  stroke = \"#888\"\n                  strokeWidth = \"2\"\n                  />\n                </g>\n                <g>\n                  <ellipse\n                  cx = {width - 180}\n                  cy = {height / 4}\n                  rx = \"4\"\n                  ry = \"4\"\n                  fill = {color[contry]}\n                  />\n                  <text\n                  x = {width - 170 + contry.length * 8}\n                  y = {height / 4}\n                  textAnchor = \"end\"\n                  dominantBaseline = \"central\"\n                  >\n                  {contry}\n                  </text>\n\n                  <ellipse\n                  cx = {width - 180}\n                  cy = {height / 4 + berHeight * 2}\n                  rx = \"4\"\n                  ry = \"4\"\n                  fill = {color.Japan}\n                  />\n                  <text\n                  x = {width - 130}\n                  y = {height / 4 + 20}\n                  textAnchor = \"end\"\n                  dominantBaseline = \"central\"\n                  >\n                  {\"Japan\"}\n                  </text>\n                </g>\n                <g>\n                {data2.map((item, i) =>{\n                  contPre2 = data2[Math.max(0, i - 1)][contry]\n                  japanPre2 = data2[Math.max(0, i - 1)][\"Japan\"]\n                return (\n                    <g>\n                      \n                      <g>\n                        <line\n                          x1 = {Math.max(0, 50 * (i - 1))}\n                          y1 = {height - contPre2 / mx2 * (height - 65) - 15}\n                          x2 = {50 * (i)}\n                          y2 = {height - item[contry] / mx2 * (height -65) - 15}\n                          stroke = \"#888\"\n                          />\n                        <line\n                          x1 = {Math.max(0, 50 * (i - 1))}\n                          y1 = {height - japanPre2 / mx2 * (height - 65) - 15}\n                          x2 = {50 * i}\n                          y2 = {height - item.Japan / mx2 * (height - 65) - 15}\n                          stroke = \"#888\"\n                          fill = {color.Japan}\n                          />\n                      </g>\n                      <g\n                      key = {item.year}\n                      transform = {`translate(${50 * (i)}, 0)`}\n                      >\n                      <ellipse\n                        cx = {0}\n                        cy = {height - item[contry] / mx2 * (height - 65) - 15}\n                        rx = \"3\"\n                        ry = \"3\"\n                        fill = {color[contry]}\n                      />\n                      <ellipse\n                        cx = {0}\n                        cy = {height - item.Japan / mx2 * (height - 65) - 15}\n                        rx = \"3\"\n                        ry = \"3\"\n                        fill = {color.Japan}\n                        />\n                      <text\n                          x = \"15\"\n                          y = {height + 15}\n                          textAnchor = \"end\"\n                          dominantBaseline = \"central\"\n                      >\n                          {item.year}\n                      </text>\n                      </g>\n                      <g\n                        key = {5000 * i}\n                        transform = {`translate(0, ${-50 * (i + 1)})`}\n                      >\n                      <line\n                          x1 = \"0\"\n                          y1 = {height - 15}\n                          x2 = {width - 200}\n                          y2 = {height - 15}\n                          stroke = \"#888\"\n                      />\n                      <text\n                          x = \"-5\"\n                          y = {height - 15}\n                          textAnchor = \"end\"\n                          dominantBaseline = \"central\"\n                          >\n                          {mx2 / 10 * (i + 1)}\n                          </text>\n                      </g>\n                    <text\n                    x = \"-5\"\n                    y = {height - 15}\n                    textAnchor = \"end\"\n                    dominantBaseline = \"central\"\n                    >\n                    {0}\n                    </text>\n                    </g>\n                )\n            })}\n            \n          </g>          \n        </g>\n        </g>\n        </svg>\n      </section>\n    </div>\n  )\n}\n\n\n\nexport default App;","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\nimport 'bulma/css/bulma.css'\n\n\nrender(<App />, document.querySelector(\"#content\"));"],"sourceRoot":""}